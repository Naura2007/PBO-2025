
/**
 * Write a description of class ClockDisplay here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;

    /**
     * Constructor for objects of class ClockDisplay. This constructor
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }
    
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }
    
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0)//it just rolled over!
    {
        hours.increment();
    }
    updateDisplay();
    }
    
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }
    public String getTime()
    {
        return displayString;
    }
    
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue()+":"+
                minutes.getDisplayValue();
    }
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
/**
 * Write a description of class ClockGUI here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class ClockGUI
{
    private JFrame frame;
    private JLabel label;
    private ClockDisplay clock;
    private boolean clockRunning = false;
    private TimerThread timerThread;
    
    
    /**
     * Constructor for objects of class ClockGUI
     */
    public ClockGUI()
    {
        makeFrame();
        clock = new ClockDisplay();
    }
    
    private void start()
    {
        clockRunning = true;
        timerThread = new TimerThread();
        timerThread.start();
    }
    
    private void stop()
    {
        clockRunning = false;
    }
    
    private void step()
    {
        clock.timeTick();
        label.setText(clock.getTime());
    }
    
    private void showAbout()
    {
        JOptionPane.showMessageDialog(frame,
        "Clock Version 1.0\n"+
        "A simple interface for the 'Objects Firts' clock display project",
        "About clock",
        JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void quit()
    {
        System.exit(0);
    }
    
    private void makeFrame()
    {
        frame = new JFrame("Clock");
        JPanel contentPane = (JPanel)frame.getContentPane();
        contentPane.setBorder(new EmptyBorder(1, 60, 1, 60));
        makeMenuBar(frame);
        
        //Specify the layout manager with nice spacing
        contentPane.setLayout(new BorderLayout(12, 12));
        
        //Create teh image pane in the center
        label = new JLabel("00:00", SwingConstants.CENTER);
        Font displayFont = label.getFont().deriveFont(96.0f);
        label.setFont(displayFont);
        //imagePanel.setBorder(new ETChedBorder());
        contentPane.add(label, BorderLayout.CENTER);
        
        //Create the toolbar with the buttons
        JPanel toolbar = new JPanel();
        toolbar.setLayout(new GridLayout(1,0));
        
        JButton startButton = new JButton("Start");
        startButton.addActionListener(e-> start());
        toolbar.add(startButton);
        
        JButton stopButton = new JButton("Stop");
        stopButton.addActionListener(e->stop());
        toolbar.add(stopButton);
        
        JButton stepButton = new JButton("Step");
        stopButton.addActionListener(e->step());
        toolbar.add(stepButton);
        
        //Add toolbar into panel with flow layout for spacing
        JPanel flow = new JPanel();
        flow.add(toolbar);
        
        contentPane.add(flow, BorderLayout.SOUTH);
        
        //building is done - arrange the components
        frame.pack();
        
        //place the frame at the center of the screen and show
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation(d.width/2 - frame.getWidth()/2, d.height/2 - frame.getHeight()/2);
        frame.setVisible(true);
    }
    
    private void makeMenuBar(JFrame frame)
    {
        final int SHORTCUT_MASK=
        Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
        
        JMenuBar menubar = new JMenuBar();
        frame.setJMenuBar(menubar);
        
        JMenu menu;
        JMenuItem item;
        
        //create the File menu
        menu = new JMenu("File");
        menubar.add(menu);
        
        item = new JMenuItem("About CLock...");
        item.addActionListener(e->showAbout());
        menu.add(item);
        
        menu.addSeparator();
        
        item = new JMenuItem("Quit");
        item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, SHORTCUT_MASK));
        item.addActionListener(e->quit());
        menu.add(item);
    }
    
    class TimerThread extends Thread
    {
        public void run()
        {
            while (clockRunning){
                step();
                pause();
            }
        }
        
        private void pause()
        {
            try{
                Thread.sleep(300);
            }
            catch(InterruptedException exc){
            }
        }
    }
}


/**
 * Write a description of class NumberDisplay here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }
    
    /** 
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }
    
    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero)
     */
    public String getDisplayValue()
    {
        if(value<10){
            return "0" + value;
        }
        
        else{
            return ""+value;
        }
    }
    
    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue<limit)){
            value = replacementValue;
        }
    }
    
    /**
     * Incement the displat value by one, rolling over to zero if the
     * limit is reached
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}
